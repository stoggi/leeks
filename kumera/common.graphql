

interface Node {
    id: String!
    label: String!
    name: String!
}

type Edge {
    id: String!
    label: String!
}

type Relationship {
    from: Node!
    to: Node!
    edge: Edge!
}

type OperatingSystemUsedByPerson {
    operatingSystem: OperatingSystem
    persons: [Person]
}

type Query {
    asset: [Asset]!
    browser: [Browser]!
    endpoint: [Endpoint]!
    impact: [Impact]!
    operatingSystem: [OperatingSystem]!
    person: [Person]!
    service: [Service]!

    operatingSystemsUsedByPersons: [OperatingSystemUsedByPerson]
    relationships: [Relationship]!
    grafana: GrafanaNodeView!
}

type Mutation {
    createService(params: CreateService!): ServiceResult!
    updateService(params: UpdateService!): ServiceResult!

    createEndpoint(params: CreateEndpoint!): EndpointResult!
    updateEndpoint(params: UpdateEndpoint!): EndpointResult!

    createOperatingSystem(params: CreateOperatingSystem!): OperatingSystemResult!
    updateOperatingSystem(params: UpdateOperatingSystem!): OperatingSystemResult!

    createBrowser(params: CreateBrowser!): BrowserResult!
    updateBrowser(params: UpdateBrowser!): BrowserResult!

    createPerson(params: CreatePerson!): PersonResult!
    updatePerson(params: UpdatePerson!): PersonResult!

    createAsset(params: CreateAsset!): AssetResult!
    updateAsset(params: UpdateAsset!): AssetResult!

    createImpact(params: CreateImpact!): ImpactResult!
    updateImpact(params: UpdateImpact!): ImpactResult!
}